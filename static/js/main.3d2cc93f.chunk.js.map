{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Delete","xmlns","x","y","width","height","viewBox","style","fill","d","transform","DataRow","id","time","deleteItem","className","moment","format","onClick","App","useState","list","setList","fetched","setFetched","useEffect","allItems","items","index","localStorage","length","key","value","getItem","push","getAllItems","console","log","e","uuid","uuidv4","setItem","map","i","newList","forEach","indexOf","splice","removeItem","Math","random","target","rel","href","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3d2cc93f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport uuidv4 from 'uuid/v4';\n\nimport './App.scss';\n\n\nconst Delete = () => <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\n    width=\"32\" height=\"32\"\n    viewBox=\"0 0 128 128\"\n    style={{fill:'#000000'}}><path fill=\"#fff\" d=\"M64 9A55 55 0 1 0 64 119A55 55 0 1 0 64 9Z\" transform=\"rotate(-45.001 64 64.001)\"></path><path fill=\"#ff5576\" d=\"M64 24A40 40 0 1 0 64 104A40 40 0 1 0 64 24Z\" transform=\"rotate(-45.001 64 64.001)\"></path><path fill=\"#444b54\" d=\"M64,122c-15.5,0-30.1-6-41-17C12,94.1,6,79.5,6,64s6-30.1,17-41c11-11,25.5-17,41-17s30.1,6,41,17l0,0l0,0 c11,11,17,25.5,17,41s-6,30.1-17,41C94.1,116,79.5,122,64,122z M64,12c-13.9,0-26.9,5.4-36.8,15.2S12,50.1,12,64 s5.4,26.9,15.2,36.8S50.1,116,64,116s26.9-5.4,36.8-15.2S116,77.9,116,64s-5.4-26.9-15.2-36.8l0,0C90.9,17.4,77.9,12,64,12z\"></path><path fill=\"#fff\" d=\"M68.2,64l11.3-11.3c1.2-1.2,1.2-3.1,0-4.2c-1.2-1.2-3.1-1.2-4.2,0L64,59.8L52.7,48.4c-1.2-1.2-3.1-1.2-4.2,0 c-1.2,1.2-1.2,3.1,0,4.2L59.8,64L48.4,75.3c-1.2,1.2-1.2,3.1,0,4.2c0.6,0.6,1.4,0.9,2.1,0.9s1.5-0.3,2.1-0.9L64,68.2l11.3,11.3 c0.6,0.6,1.4,0.9,2.1,0.9s1.5-0.3,2.1-0.9c1.2-1.2,1.2-3.1,0-4.2L68.2,64z\"></path></svg>\n\nconst DataRow = ({ id, time, deleteItem }) => <div className=\"container\" >\n            <div className=\"row display-box\">\n              <div className=\"col-sm-11\">\n                <p>\n                  {moment(time).format('llll')}\n                </p>\n              </div>\n              <div className=\"col-sm-1\">\n                <button onClick={()=>deleteItem(id)} className=\"circular\"><Delete /></button>\n              </div>  \n            </div>\n          </div>\n\nconst App = () => {\n  const [list, setList] = useState([]);\n  const [fetched, setFetched] = useState(false)\n  const addItem = () =>{\n    console.log(list)\n    let uuid = uuidv4();\n    let time = moment().format();\n    setList([ ...list, { id: uuid, time: time } ]);\n    localStorage.setItem(uuid, time);\n  }\n  const deleteItem = (id) => {\n    let newList = [...list];\n    newList.forEach(i => {\n      if(i.id == id){\n        let index = newList.indexOf(i)\n        newList.splice(index, 1)\n        setList(newList)\n        localStorage.removeItem(i.id)\n      }\n    })\n  }\n  const getAllItems = () => {\n    let items = [];\n    for (let index = 0; index < localStorage.length; index++) {\n      const key = localStorage.key(index);\n      const value = localStorage.getItem(key)\n      items.push({ id: key, time: value })\n    }\n    return items;\n  }\n  useEffect(()=>{\n    if(!fetched){\n      try{\n        let allItems = getAllItems();\n        console.log(allItems)\n        setList([...allItems]);\n      }\n      catch(e){\n        console.log(e)\n      }\n      setFetched(true);\n    }\n  })\n  return (\n    <>\n    <div className=\"responsive-padding\">\n      <br/>\n      <div className=\"center\">\n        <div>\n          <button onClick={addItem} className=\"round-button\">\n            <span>Pain</span>\n          </button>\n        </div>\n      </div>\n      <br/><br/>\n      <h3>Previous </h3>\n      <div>\n      {\n        list.length > 0 ? list.map(i=> <DataRow deleteItem={(id)=>deleteItem(id)} id={i.id} time={i.time} key={Math.random()} />) : <div className=\"display-box\"><p>No items to display</p></div>\n      }\n      </div>\n      <br/><br/>\n      <div>\n        <h2><b>Pain Button by Ray Dalio</b></h2>\n        <p>\n          This is an example of pain button as envisioned by Ray Dalio in the book <mark className=\"tertiary\">Principles</mark>. You can use this app to record when you're in pain and reflect on it later. The app will work offline. Cheers!\n        </p>\n      </div>\n    </div>\n    <footer className=\"center\">\n      <p>Developed by <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/neutralboy/painbutton.github.io\"><mark>neutralboy</mark></a> </p>\n    </footer>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}